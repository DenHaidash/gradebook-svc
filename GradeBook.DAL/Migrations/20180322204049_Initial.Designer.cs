// <auto-generated />
using GradeBook.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GradeBook.DAL.Migrations
{
    [DbContext(typeof(GradebookContext))]
    [Migration("20180322204049_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("GradeBook.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName")
                        .IsRequired();

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GradeBook.Models.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SemesterRefId");

                    b.Property<int>("SpecialtyRefId");

                    b.HasKey("Id");

                    b.HasIndex("SemesterRefId");

                    b.HasIndex("SpecialtyRefId");

                    b.ToTable("Curriculum");
                });

            modelBuilder.Entity("GradeBook.Models.FinalGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GradebookRefId");

                    b.Property<int>("StudentRefId");

                    b.Property<int>("TeacherRefId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("GradebookRefId");

                    b.HasIndex("StudentRefId");

                    b.HasIndex("TeacherRefId");

                    b.ToTable("FinalGrade");
                });

            modelBuilder.Entity("GradeBook.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GradebookRefId");

                    b.Property<int>("StudentRefId");

                    b.Property<int>("TeacherRefId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("GradebookRefId");

                    b.HasIndex("StudentRefId");

                    b.HasIndex("TeacherRefId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("GradeBook.Models.Gradebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurriculumRefId");

                    b.Property<int>("GroupRefId");

                    b.Property<int>("SubjectRefId");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumRefId");

                    b.HasIndex("GroupRefId");

                    b.HasIndex("SubjectRefId");

                    b.ToTable("Gradebooks");
                });

            modelBuilder.Entity("GradeBook.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("SpecialityRefId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityRefId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("GradeBook.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseNumber");

                    b.Property<int>("CourseSemesterNumber");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("GradeBook.Models.SemesterSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndsAt");

                    b.Property<int>("GroupRefId");

                    b.Property<int>("SemesteRefId");

                    b.Property<DateTime>("StartsAt");

                    b.HasKey("Id");

                    b.HasIndex("GroupRefId");

                    b.HasIndex("SemesteRefId");

                    b.ToTable("SemesterSchedule");
                });

            modelBuilder.Entity("GradeBook.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("GradeBook.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountRefId");

                    b.Property<int>("GroupRefId");

                    b.HasKey("Id");

                    b.HasIndex("AccountRefId");

                    b.HasIndex("GroupRefId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GradeBook.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CurriculumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("GradeBook.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountRefId");

                    b.Property<int?>("GradebookId");

                    b.HasKey("Id");

                    b.HasIndex("AccountRefId");

                    b.HasIndex("GradebookId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("GradeBook.Models.Curriculum", b =>
                {
                    b.HasOne("GradeBook.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Specialty", "Specialty")
                        .WithMany("Curriculum")
                        .HasForeignKey("SpecialtyRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.FinalGrade", b =>
                {
                    b.HasOne("GradeBook.Models.Gradebook", "Gradebook")
                        .WithMany("FinalGrades")
                        .HasForeignKey("GradebookRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.Grade", b =>
                {
                    b.HasOne("GradeBook.Models.Gradebook", "Gradebook")
                        .WithMany("Grades")
                        .HasForeignKey("GradebookRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.Gradebook", b =>
                {
                    b.HasOne("GradeBook.Models.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.Group", b =>
                {
                    b.HasOne("GradeBook.Models.Specialty", "Specialty")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.SemesterSchedule", b =>
                {
                    b.HasOne("GradeBook.Models.Group", "Group")
                        .WithMany("Schedule")
                        .HasForeignKey("GroupRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesteRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.Student", b =>
                {
                    b.HasOne("GradeBook.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Models.Subject", b =>
                {
                    b.HasOne("GradeBook.Models.Curriculum")
                        .WithMany("Subjects")
                        .HasForeignKey("CurriculumId");

                    b.HasOne("GradeBook.Models.Teacher")
                        .WithMany("Specializations")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("GradeBook.Models.Teacher", b =>
                {
                    b.HasOne("GradeBook.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Models.Gradebook")
                        .WithMany("Teachers")
                        .HasForeignKey("GradebookId");
                });
#pragma warning restore 612, 618
        }
    }
}
